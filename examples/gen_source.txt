.module = lex
.filepath = lex.c3
.prefix = Ck
.keywords =
	asm			any			anyfault	assert
	attribute	break		nextcase	cast
	catch		const		continue	default
	defer		def 		do 			else
	enum		extern		errtype		false
	fn			generic		if			import
	inline 		macro		module 		
	null		public		return		struct
	switch		true		try 		typeid
	var 		void 		while		bool
	quad 		double 		float 		long
	ulong 		int			uint 		byte
	short 		ushort 		char 		isz
	usz			float16 	float128 	foreach

.prefix = Cc
.keywords = 
	echo 		else 		error 		endfor
	endforeach 	endif		endswitch	for
	foreach 	if 			switch 		typef
	vaarg 		vaconst 	vacount 	varef
	vatype		and 		assert 		case
	default

.newtoken = PLUSEQUAL
.newtoken = PLUSPLUS
.token = PLUS
			if ((self.caret + 1) != self.data.len)
			{
				cur_char = self.data[self.caret + 1];
				Tkn peek_token = lex_token_table[cur_char];
				if (peek_token == PLUS)
				{
					self.caret += 2;
					return	Lexeme
					{
						.token = PLUSPLUS,
						.c = cur_char,
						.slice = self.data[caret:2],
					};
				}
				else if (peek_token == EQUAL)
				{
					self.caret += 2;
					return	Lexeme
					{
						.token = PLUSEQUAL,
						.c = cur_char,
						.slice = self.data[caret:2],
					};
				}
			}
			nextcase default;
